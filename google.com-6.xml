<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[
<!DOCTYPE html>

<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<title>google.com</title>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/classroom-new-studens/b@main/TemplateData/style.css"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/classroom-new-studens/b@main/EccentricData/eccentric-style.css"/>
<script src="https://cdn.jsdelivr.net/gh/classroom-new-studens/b@main/TemplateData/gamepush-unity.js"></script>
<style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            height: 100%;
        }

        #unity-canvas {
            /*width: auto;*/
            /*height: 100vh;*/
            aspect-ratio: 16 / 9;
            object-fit: contain;
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
        }
    </style>
<script>
        const projectId = "14300";
        const publicToken = "JH4ES8DosTVK9BrJoVvqMefVqCsjQVnA";
        const russianName = "";
        const englishName = "";
        const isAspectRationVertical = "";
        const overlayBackgroundColor = "";
        const progressBarFillColor = "";
        const progressBarBackgroundColor = "";
        const progressBarBorderColor = "";
        const autocallGameReady = "";
        
    </script>
<script>
        var _unityAwaiter = {};
        _unityAwaiter.ready = new Promise((resolve, reject) => {
            _unityAwaiter.done = resolve;
            _unityAwaiter.abort = reject;
        });

        var _gpAwaiter = {};
        _gpAwaiter.ready = new Promise((resolve) => {
            _gpAwaiter.done = resolve;
        });

        window.unityInstance = null;
        window.onGPError = () => _gpAwaiter.done();

        window.onGPInit = async (gp) => {
            gp.ads.showPreloader();
            
                let logoHtml = null;
            if (russianName !== "" || englishName !== ""){
                if (gp.language === "ru"){
                    logoHtml = `<div id="unity-name">${russianName}</div>`;
                }
                else {
                    logoHtml = `<div id="unity-name">${englishName}</div>`;
                }
            }
            else {
                logoHtml = `<img src="https://cdn.jsdelivr.net/gh/classroom-new-studens/b@main/logo.png">`;
            }
            let logo = document.querySelector("#unity-logo");
            logo.innerHTML = logoHtml;
            

            window.GamePush = new GamePushUnity(gp);
            gp.player.ready.finally(_gpAwaiter.done);

            await _unityAwaiter.ready;

            if (autocallGameReady != null && parseFloat(autocallGameReady) > 0) {
                setTimeout(() => gp.gameStart(), parseFloat(autocallGameReady));
            }
        };
    </script>
<script>
        ((g, a, m, e) => { let o = () => { let p = document.createElement("script"); p.src = `${a[0]}?projectId=${m}&publicToken=${e}`, p.onerror = () => { a.shift(), a.length > 0 ? (o(), p.remove()) : "onGPError" in g && g.onGPError() }, document.head.appendChild(p) }; o() })(window, ["https://gs.eponesh.com/sdk/gamepush.js", "https://s3.eponesh.com/files/gs/sdk/gamepush.js", "TemplateData/gp-bundle/gamepush.js"], projectId, publicToken);
    </script>
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<div id="eccentric-app"></div>
<script src="https://cdn.jsdelivr.net/gh/classroom-new-studens/b@main/EccentricData/eccentric-script.js"></script>
<script>
    const buildUrl = "https://cdn.jsdelivr.net/gh/classroom-new-studens/b@main/Build/";
    const loaderUrl = buildUrl + "/j1111.loader.js";
    const config = {
        dataUrl: buildUrl + "/j1111.data.unityweb",
        frameworkUrl: buildUrl + "/j1111.framework.js.unityweb",
        codeUrl: buildUrl + "/j1111.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "DefaultCompany",
        productName: "Roblox",
        productVersion: "1",
    };

    const container = document.querySelector("#unity-container");
    const canvas = document.querySelector("#unity-canvas");
    const loadingCover = document.querySelector("#loading-cover");
    const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
    const progressBarFull = document.querySelector("#unity-progress-bar-full");
    const spinner = document.querySelector('.spinner');

    if (overlayBackgroundColor !== "-" && overlayBackgroundColor !== " " && overlayBackgroundColor !== "")
        canvas.style.background = overlayBackgroundColor;

    if (progressBarFillColor !== "-" && progressBarFillColor !== " " && progressBarFillColor !== "")
        progressBarFull.style.background = progressBarFillColor;

    if (progressBarBackgroundColor !== "-" && progressBarBackgroundColor !== " " && progressBarBackgroundColor !== "")
        progressBarEmpty.style.background = progressBarBackgroundColor;

    if (progressBarBorderColor !== "-" && progressBarBorderColor !== " " && progressBarBorderColor !== "")
        progressBarEmpty.style.border.color = progressBarBorderColor;


    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
    }

    loadingCover.style.display = "";

    const unityLoader = document.createElement("script");
    unityLoader.src = loaderUrl;
    unityLoader.onload = async () => {
        await _gpAwaiter.ready;
        createUnityInstance(canvas, config, (progress) => {
            spinner.style.display = "none";
            progressBarEmpty.style.display = "";
            progressBarFull.style.width = `${100 * progress}%`;
        }).then((unityInstance) => {
            window.unityInstance = unityInstance;
            _unityAwaiter.done(unityInstance);
            loadingCover.style.display = "none";
        }).catch((message) => {
            _unityAwaiter.abort(message);
            alert(message);
        });
    };
    document.body.appendChild(unityLoader);

    document.addEventListener("pointerdown", () => {
        container.focus();
        window.focus();
        canvas.focus();
    });
    
    if (isAspectRationVertical === 'true') {
        canvas.style.aspectRatio = '9 / 16';
    } else {
        canvas.style.aspectRatio = '16 / 9';
    }
    canvas.style.backgroundSize = 'cover';
    
    
</script>
</body>
</html>

]]></Content>
</Module>